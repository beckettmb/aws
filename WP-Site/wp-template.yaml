Parameters:
  Username:
    Description: "DB Username"
    Type: String
  Password:
    Description: "DB Password"
    Type: String

Resources:
  WpVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.9.0/24
  WpIgw:
    Type: AWS::EC2::InternetGateway
  VpcIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref WpIgw
      VpcId: !Ref WpVpc

  PubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 192.168.9.0/26
      VpcId: !Ref WpVpc
      MapPublicIpOnLaunch: True
  PubSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 192.168.9.64/27
      VpcId: !Ref WpVpc
      MapPublicIpOnLaunch: True
  PubSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 192.168.9.96/27
      VpcId: !Ref WpVpc
      MapPublicIpOnLaunch: True
  PrvSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1d
      CidrBlock: 192.168.9.128/26
      VpcId: !Ref WpVpc
  PrvSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1e
      CidrBlock: 192.168.9.192/27
      VpcId: !Ref WpVpc
  PrvSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1f
      CidrBlock: 192.168.9.224/27
      VpcId: !Ref WpVpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WpVpc
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref WpIgw
  PublicSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet1
  PublicSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet2
  PublicSubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet3

  WpSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: wp-sg
      GroupDescription: SG for web servers
      VpcId: !Ref WpVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WpDbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: wp-db-sg
      GroupDescription: SG for database
      VpcId: !Ref WpVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt WpSg.GroupId

  WpDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: wpdbsubnetgroup
      DBSubnetGroupDescription: Subnet Group for database
      SubnetIds:
        - !Ref PrvSubnet1
        - !Ref PrvSubnet2
        - !Ref PrvSubnet3
  WpDb:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBName: wpdb
      DBInstanceIdentifier: wpdbinstance
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref WpDbSubnetGroup
      Engine: mysql
      AllocatedStorage: 20
      MasterUsername: !Ref Username
      MasterUserPassword: !Ref Password
      VPCSecurityGroups: 
        - !GetAtt WpDbSg.GroupId
      MultiAZ: true
      PubliclyAccessible: false
      StorageType: gp2

  WebServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - "install"
            - "update_config"
            - "start"
        install:
          packages:
            yum:
              httpd: []
        update_config:
          commands:
            update_1:
              command: "sed \"s/database_name_here/wpdb/\" wp-config-sample.php > wp-config.php"
              cwd: "/var/www/html"
            update_2:
              command: "sed -i \"s/username_here/$WPVAR/\" wp-config.php"
              cwd: "/var/www/html"
              env:
                WPVAR: !Ref Username
            update_3:
              command: "sed -i \"s/password_here/$WPVAR/\" wp-config.php"
              cwd: "/var/www/html"
              env:
                WPVAR: !Ref Password
            update_4:
              command: "sed -i \"s/localhost/$WPVAR/\" wp-config.php"
              cwd: "/var/www/html"
              env:
                WPVAR: !GetAtt WpDb.Endpoint.Address
          files:
            /var/www/html/health.txt:
              content: "Healthy!"
              mode: "000644"
              owner: "apache"
              group: "apache"
        start:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: ami-02354e95b39ca8dec
      SubnetId: !Ref PubSubnet1
      InstanceType: t2.micro
      KeyName: wp-ec2-key
      SecurityGroupIds:
        - !GetAtt WpSg.GroupId
      Tags:
        - Key: "Name"
          Value: "webserver"
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y aws-cfn-bootstrap
            amazon-linux-extras install -y php7.2
            mkdir -p /var/www/html
            cd /var/www/html
            wget https://wordpress.org/wordpress-5.5.tar.gz
            tar -xzf wordpress-5.5.tar.gz
            cp -r wordpress/* /var/www/html
            rm -fr wordpress
            rm -fr wordpress-5.5.tar.gz
            chmod -R 755 wp-content
            chown -R apache:apache wp-content
            /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region} --configsets setup

  WpAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: wp-alb
      SecurityGroups:
        - !GetAtt WpSg.GroupId
      Type: application
      Subnets:
        - !Ref PubSubnet1
        - !Ref PubSubnet2
        - !Ref PubSubnet3
  Servers:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: servers
      Protocol: HTTP
      HealthCheckPath: /health.txt
      Port: 80
      TargetType: instance
      Targets:
        - Id: !Ref WebServer
          Port: 80
      VpcId: !Ref WpVpc
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WpAlb
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Servers

Outputs:
  WpSgId:
    Value: !GetAtt WpSg.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-WpSgId"
  PubSubnet1:
    Value: !Ref PubSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PubSubnet1"
  PubSubnet2:
    Value: !Ref PubSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PubSubnet2"
  PubSubnet3:
    Value: !Ref PubSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PubSubnet3"
  TgArn:
    Value: !Ref Servers
    Export:
      Name: !Sub "${AWS::StackName}-TgArn"
  DNSName:
    Value: !GetAtt WpAlb.DNSName
